{"version":3,"sources":["components/AddTask/AddTask.js","components/TaskComp/TaskComp.js","components/LogInComp/LogInComp.js","components/SignUpComp/SignUpComp.js","components/HomeComp/HomeComp.js","App.js","serviceWorker.js","index.js"],"names":["AddTask","props","year","Date","getFullYear","onSubmit","handleSubmit","method","id","for","type","required","placeholder","min","max","TaskComp","useState","tasks","setTasks","taskForm","setTaskForm","useEffect","fetch","user","then","res","json","data","getTasks","compTask","e","taskId","parseInt","target","mode","headers","body","JSON","stringify","response","status","console","log","uname","onClick","logOut","length","map","task","key","Tid","className","Tname","Tdesc","preventDefault","uid","tname","document","getElementById","value","tdesc","desc","descString","tdate","dd","mm","yy","formdd","formmm","formyy","dateString","ttime","hr","formhr","formmin","tstring","timeString","reset","LogInComp","handleLogin","pattern","toggleSignup","resetHome","SignUpComp","pass1","setpass1","pass2","setpass2","name","email","pass","minLength","onChange","test","toggleLogin","HomeComp","loginState","setloginState","signupState","setsignupState","loggedIn","taskPage","App","setloggedIn","uId","setuId","uName","setuName","logState","history","useHistory","homePage","push","logStatus","localStorage","getItem","userId","userName","clear","exact","path","children","loginPage","resStatus","dir","setItem","userid","username","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c90cc8b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AddTask = (props) => {\r\n    let year = new Date().getFullYear();\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit} method='POST' id='taskForm'>\r\n                <label for='taskname'>Title:</label>\r\n                <input type='text' id='taskname' required></input>\r\n                <label for='taskdesc'>Description:</label>\r\n                <textarea id='taskdesc' placeholder='(optional)'></textarea>\r\n                <label for='taskdate'>Date:</label>\r\n                <div id='taskdate'>\r\n                    <label for='dateD'>DD:</label>\r\n                    <input type='number' min=\"1\" max=\"31\" placeholder=\"01\" id=\"dateD\"></input> -\r\n                    <label for='dateM'>MM:</label> \r\n                    <input type='number' min=\"1\" max=\"12\" placeholder=\"01\" id=\"dateM\"></input> -\r\n                    <label for='dateD'>YY:</label>\r\n                    <input type='number' min={year} max=\"2099\" placeholder={year} id=\"dateY\"></input>\r\n                </div>\r\n                <label for='tasktime'>Time:</label>\r\n                <div id='tasktime'>\r\n                    <input type='number' min=\"0\" max=\"23\" placeholder=\"00\" id=\"timeH\"></input> :\r\n                    <input type='number' min=\"0\" max=\"59\" placeholder=\"00\" id=\"timeM\"></input>\r\n                </div>\r\n                <button type='submit'>Add!</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTask;","import React, { useState, useEffect } from 'react';\r\nimport AddTask from '../AddTask/AddTask';\r\n\r\nconst TaskComp = (props) => {\r\n    \r\n    const [tasks, setTasks] = useState([]);\r\n    const [taskForm, setTaskForm] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const getTasks = () => {\r\n            fetch(`api/tasks/${props.user}`)\r\n            .then(res => res.json())\r\n            .then(data => setTasks(data));\r\n        };\r\n        getTasks();\r\n    }, [props.user]);\r\n\r\n    const getTasks = () => {\r\n        fetch(`api/tasks/${props.user}`)\r\n        .then(res => res.json())\r\n        .then(data => setTasks(data));\r\n    };\r\n\r\n    const toggleForm = () => {\r\n        setTaskForm(!taskForm);\r\n    };\r\n\r\n    const compTask = (e) => {\r\n        let taskId = parseInt(e.target.id);\r\n        fetch('api/task/u/complete', {\r\n            mode: 'cors',\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"taskid\": taskId})\r\n        }).then((response) => {\r\n            if (response.status === 200) {\r\n                getTasks();\r\n            } else {\r\n                console.log(\"error: \" + response.status)\r\n            }\r\n        })\r\n    }\r\n\r\n    //Delete task function\r\n    // const delTask = (e) => {\r\n    //     let taskId = parseInt(e.target.id);\r\n    //     fetch('api/task/del', {\r\n    //         mode: 'cors',\r\n    //         method: 'post',\r\n    //         headers: {\r\n    //             'Accept': 'application/json, text/plain, */*',\r\n    //             'Content-Type': 'application/json'\r\n    //         },\r\n    //         body: JSON.stringify({\"taskid\": taskId})\r\n    //     }).then((response) => {\r\n    //         if (response.status === 200) {\r\n    //             getTasks();\r\n    //         } else {\r\n    //             console.log(\"error: \" + response.status)\r\n    //         }\r\n    //     })\r\n    // };\r\n\r\n    const timeString = () => {\r\n        let hr;\r\n        let min;\r\n        let formhr = document.getElementById('timeH').value;\r\n        console.log(typeof(formhr));\r\n        let formmin = document.getElementById('timeM').value;\r\n        formhr.length === 1 ? hr = \"0\" + formhr : hr = formhr;\r\n        formmin.length === 1 ? min = \"0\" + formmin : min = formmin;\r\n        formhr === '' ? hr = \"00\" : hr = hr;\r\n        formmin === '' ? min = \"00\" : min = min;\r\n        let tstring = hr + min + \"00\";\r\n        if (parseInt(tstring) === 0) {\r\n            return 'none';\r\n        } else {\r\n            return tstring;\r\n        }\r\n    };\r\n\r\n    const dateString = () => {\r\n        let dd;\r\n        let mm;\r\n        let yy;\r\n        let formdd = document.getElementById('dateD').value;\r\n        let formmm = document.getElementById('dateM').value;\r\n        let formyy = document.getElementById('dateY').value;\r\n        formdd.length === 1 ? dd = \"0\" + formdd : dd = formdd;\r\n        formmm.length === 1 ? mm = \"0\" + formmm : mm = formmm;\r\n        formyy.length === 1 ? yy = \"0\" + formyy : yy = formyy;\r\n        let dstring = yy + mm + dd;\r\n        if (dd === '' || mm === '' || yy === '' ) {\r\n            return 'none';\r\n        } else {\r\n            return dstring;\r\n        }\r\n    };\r\n\r\n    const descString = () => {\r\n        let desc = document.getElementById('taskdesc').value;\r\n        if (desc === '') {\r\n            return 'none';\r\n        } else {\r\n            return desc;\r\n        };\r\n    };\r\n\r\n    // ADD BELOW TO CLEAR FORM ON SUBMIT\r\n    // document.getElementById('ContactForm').reset()\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const uid = props.user;\r\n        const tname = document.getElementById('taskname').value;\r\n        const tdesc = descString();\r\n        const tdate = dateString();\r\n        const ttime = timeString();\r\n        fetch('api/newtask', {\r\n            mode: 'cors',\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"userid\": uid,\r\n                \"taskname\": tname,\r\n                \"taskdesc\": tdesc,\r\n                \"taskdate\": tdate,\r\n                \"tasktime\": ttime\r\n            })\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200) {\r\n                document.getElementById('taskForm').reset();\r\n                setTaskForm(false);\r\n                getTasks();\r\n            } else {\r\n                console.log(\"error: \" + response.status)\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <p>I'm the task component</p>\r\n            <h4>Welcome back, {props.uname}</h4>\r\n            <p>the user id is {props.user}</p>\r\n            <button onClick={props.logOut}>log out</button>\r\n            <div id='addTaskBtn' onClick={toggleForm}>New Task</div>\r\n            {tasks.length > 0 ? [\r\n                tasks.map(task => (\r\n                <div key={task.Tid}>\r\n                    <div className='taskHeader'>\r\n                        <h4>{task.Tname}</h4>\r\n                        <p id={task.Tid} onClick={compTask}>X</p>\r\n                    </div>\r\n                    <div className='taskDesc'>\r\n                        {task.Tdesc}\r\n                    </div>\r\n                </div>\r\n            ))] : <p>No tasks set</p>\r\n        }\r\n            {taskForm ? <AddTask handleSubmit={handleSubmit}/> : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskComp;","import React from 'react';\r\n\r\nconst LogInComp = (props) => {\r\n    return (\r\n        <div>\r\n            <p>I'm the log in component</p>\r\n            <form onSubmit={props.handleLogin} method='POST'>\r\n                <label for='u_email'>email: </label>\r\n                <input \r\n                    type='text' \r\n                    id='u_email' \r\n                    placeholder='someone@organised.com'\r\n                    pattern=\"[a-zA-Z0-9!#$%&amp;'*+\\/=?^_`{|}~.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\"\r\n                    required\r\n                    ></input>\r\n                <label for='u_pass'>password: </label>\r\n                <input \r\n                    type='password' \r\n                    id='u_pass'\r\n                    required\r\n                    ></input>\r\n                <button type='submit'>Log in</button>\r\n            </form>\r\n            <br />\r\n            <p>Don't have an account? <span onClick={props.toggleSignup}>click here</span> to sign up</p>\r\n            <p onClick={props.resetHome}>X</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogInComp;","import React, { useState, useEffect } from 'react';\r\n\r\nconst SignUpComp = (props) => {\r\n    const [pass1, setpass1] = useState('i');\r\n    const [pass2, setpass2] = useState('o');\r\n\r\n    useEffect(() => {\r\n        const checkmatch = () => {\r\n            if (pass1 === pass2) {\r\n                return ':)';\r\n            } else {\r\n                return ':(';\r\n            };\r\n        };\r\n        checkmatch();\r\n    }, [pass1, pass2]);\r\n\r\n    const checkmatch = () => {\r\n        if (pass1 === pass2) {\r\n            return ':)';\r\n        } else {\r\n            return ':(';\r\n        };\r\n    };\r\n    \r\n    const checknum = () => {\r\n        if (/\\d/.test(pass1)) {\r\n            return ':)';\r\n        } else {\r\n            return ':(';\r\n        };\r\n    };\r\n\r\n    const setp1 = (e) => {\r\n        setpass1(e.target.value);\r\n    };\r\n\r\n    const setp2 = (e) => {\r\n        setpass2(e.target.value);\r\n    };\r\n\r\n    const checksubmit = (e) => {\r\n        e.preventDefault();\r\n        const name = document.getElementById('username').value;\r\n        const email = document.getElementById('email').value;\r\n        const pass = document.getElementById('pass').value;\r\n        fetch('api/newacc', {\r\n            mode: 'cors',\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"name\": name,\r\n                \"pass\": pass,\r\n                \"email\": email\r\n            })\r\n        })\r\n        .then((response) => {\r\n            if (response.status === 200) {\r\n                console.log('congrats');\r\n                document.getElementById('signupForm').reset();\r\n                props.resetHome();\r\n            } else {\r\n                console.log('error: ' + response.status);\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>I'm the sign up component</p>\r\n            <form id='signupForm' onSubmit={checksubmit} method='POST'>\r\n                <label for='username'>Name:</label>\r\n                <input type='text' id='username' placeholder='Jessica' required></input>\r\n                <label for='email'>Email:</label>\r\n                <input type='text' \r\n                        id='email' \r\n                        placeholder='someone@organised.com'\r\n                        pattern=\"[a-zA-Z0-9!#$%&amp;'*+\\/=?^_`{|}~.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\"\r\n                        required></input>\r\n                <label for='pass'>Password:</label>\r\n                <input minLength='8' type='password' id='pass' placeholder='password' required onChange={setp1}></input>\r\n                <label for='rpass'>Re-enter Password:</label>\r\n                <input type='password' minLength='8' id='rpass' placeholder='password' required onChange={setp2}></input>\r\n                <button type='submit'>Sign Up</button>\r\n            </form>\r\n            <p>passwords match: {checkmatch()}</p>\r\n            <p>password contains number(s): {checknum()}</p>\r\n            <br />\r\n            <p onClick={props.toggleLogin}>back to log in</p>\r\n            <p onClick={props.resetHome}>X</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUpComp;","import React, { useState } from 'react';\r\nimport LogInComp from '../LogInComp/LogInComp';\r\nimport SignUpComp from '../SignUpComp/SignUpComp';\r\n\r\n\r\nconst HomeComp = (props) => {\r\n    const [loginState, setloginState] = useState(false);\r\n    const [signupState, setsignupState] = useState(false);\r\n\r\n\r\n    const toggleLogin = () => {\r\n        setsignupState(false);\r\n        setloginState(!loginState);\r\n    };\r\n    const toggleSignup = () => {\r\n        setloginState(false);\r\n        setsignupState(!signupState);\r\n    };\r\n\r\n    const resetHome = () => {\r\n        setsignupState(false);\r\n        setloginState(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>I'm the Home component</p>\r\n            {props.loggedIn === 'true' ? <button onClick={props.taskPage}>Tasks</button> : null}\r\n            {props.loggedIn === 'true' ? <button onClick={props.logOut}>Log out</button> : <button onClick={toggleLogin}>Log In</button>}\r\n            {loginState | signupState === true ? null : <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus.</p>}\r\n            {loginState ? <LogInComp toggleSignup={toggleSignup} resetHome={resetHome} {...props} /> : null}\r\n            {signupState ? <SignUpComp toggleLogin={toggleLogin} resetHome={resetHome} /> : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeComp;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useHistory,\r\n  Redirect\r\n} from 'react-router-dom';\r\nimport './App.css';\r\nimport TaskComp from './components/TaskComp/TaskComp';\r\nimport HomeComp from './components/HomeComp/HomeComp';\r\n\r\n\r\nconst App = () => {\r\n  const [loggedIn, setloggedIn] = useState('false');\r\n  const [uId, setuId] = useState(0);\r\n  const [uName, setuName] = useState('');\r\n\r\n  useEffect(() => {\r\n    logState();\r\n  }, [loggedIn]);\r\n\r\n  let history = useHistory();\r\n  // route functions\r\n  // home direct\r\n  const homePage = () => {\r\n    history.push('/');\r\n  };\r\n  // task direct\r\n  const taskPage = () => {\r\n    history.push('/tasks');\r\n  };\r\n  // login direct\r\n  const loginPage = () => {\r\n    history.push('/login');\r\n  };\r\n\r\n  const logState = () => {\r\n    const logStatus = localStorage.getItem('loggedIn');\r\n    const userId = localStorage.getItem('userId');\r\n    const userName = localStorage.getItem('userName');\r\n    setloggedIn(logStatus);\r\n    setuId(userId);\r\n    setuName(userName);\r\n  };\r\n\r\n  const logOut = () => {\r\n    localStorage.clear();\r\n    logState();\r\n    homePage();\r\n  }\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    const email = document.getElementById('u_email').value;\r\n    const pass = document.getElementById('u_pass').value;\r\n    console.dir({\r\n      \"email\": email,\r\n      \"e-type\": typeof(email),\r\n      \"pass\": pass,\r\n      \"p-type\": typeof(pass),\r\n    });\r\n    let resStatus;\r\n    fetch('api/login', {\r\n            mode: 'cors',\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json, text/plain, */*',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"email\": email,\r\n                \"pass\": pass,\r\n            })\r\n    })\r\n    .then(response => {\r\n      resStatus = response.status;\r\n      return response.json();\r\n    })\r\n    .then(response => {\r\n      if (resStatus === 200) {\r\n        console.log(response);\r\n        localStorage.setItem('loggedIn', 'true');\r\n        localStorage.setItem('userId', response.userid);\r\n        localStorage.setItem('userName', response.username);\r\n        logState();\r\n        taskPage();\r\n      }\r\n    })\r\n  };\r\n\r\n  return (\r\n    <div id='App'>\r\n      <Switch>\r\n        <Route exact path='/' children={<HomeComp taskPage={taskPage} loginPage={loginPage} logOut={logOut} handleLogin={handleLogin} loggedIn={loggedIn} />} />\r\n        <Route path='/tasks' children={loggedIn ? <TaskComp user={uId} uname={uName} logOut={logOut} homePage={homePage}/> : <Redirect to='/' />} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}